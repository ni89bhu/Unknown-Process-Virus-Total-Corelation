# To check whether the module is installed.
$check = Get-Module -ListAvailable -Name Sqlps

If ($check -eq $null) {
# Install the SQL Server Module.  
Install-module -Name SqlServer -Scope AllUsers
    
# Import the SQL Server Module.    
Import-Module Sqlps -DisableNameChecking
}
else {write-host "module present"}

$query1 = "
SELECT        HS.MD5_Hash, FD.File_Version, FD.File_Description, FD.Product_Name, FD.Product_Version, FD.File_Size, FD.Signed_By, FD.Counter_Signed_By, FD.Counter_SignedOn, PN.Process_Name,

                         PN.Image_File_Path, PD.LogTime, PD.System_Name, PD.User_Name, PD.CommandLine, PD.Parent_Process_Name, PD.Parent_Image_File_Path, PD.FileModified_On

FROM            EAMD5HashStatus AS HS INNER JOIN

                         EAProcess_FileDetails AS FD ON HS.Hash_Id = FD.Hash_Id INNER JOIN

                         EAProcess_Names AS PN ON FD.Id = PN.File_Id INNER JOIN

                         EAProcess_Details AS PD ON PN.Id = PD.Process_Id
WHERE LogTime > DATEADD(HOUR, -1, GETDATE())
ORDER BY LogTime Desc
                         "

$table = Invoke-Sqlcmd -ServerInstance ".\SQLEXPRESS" -Database "EventTrackerData" -Query $query1

$md5 = "E8D67C32357726661988ADD5BCDDD437"
$query = "UPDATE EAMD5HashStatus
SET Status = 1
WHERE MD5_Hash = '$md5'
"

Invoke-Sqlcmd -ServerInstance ".\SQLEXPRESS" -Database "EventTrackerData" -Query $query
##########################

$logprocessdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.LogSearchProcess.dll")
$logparmeterdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.LogSearchParameter.dll")
$datapersist = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.Report.DataPersistance.dll")

#################################################################################################################################################################################################################
#################################################################################################################################################################################################################

$logparmeter01 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logparmeter02 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logcerteria = New-Object Prism.LogSearchParameter.LogSearchParameter
$searchconfig = New-Object Prism.LogSearchParameter.SearchConfig
$searchconfig.IsParseTokens = "False"
$logcerteria.FromDate = (get-date).AddHours($duration)
$logcerteria.ToDate = (get-date)
$logcerteria.SystemGroups = "All Windows Systems"
$logcerteria.SystemIncludeType = 1
$logparmeter01.ParameterId = 0
$logparmeter01.Operator = 1
$logparmeter01.ParameterName = "event id"
$logparmeter01.ParameterType = 1
$logparmeter01.SearchValue = "4625"
$logparmeter02.ParameterId = 0
$logparmeter02.Operator = 1
$logparmeter02.ParameterName = "source"
$logparmeter02.ParameterType = 1
$logparmeter02.SearchValue = "Microsoft-Windows-Security-Auditing"
$logcerteria.AdvancedParameter = $logparmeter01
$logcerteria.AdvancedParameter += $logparmeter02
$logticks = (get-date).Ticks
$mdbname1 = "LogonAnalysis_{0}" -f $logticks
$param = new-object Prism.LogSearchParameter.LogSearchParameterContext ("$mdbname1")
$param.Update($logcerteria)
$search = new-object Prism.LogSearchProcess.LogSearchProcessing ("$mdbname1")
$search.StartProcessing(4) | Out-Null
